@model Niveau.Areas.User.Models.ShoppingCart.ShoppingCart
@{
    ViewData["Title"] = "Index";
    Layout = "/Areas/User/Views/Shared/_AuthorizeLayout.cshtml";
}
<head>
</head>

<section class="h-100" style="background-color: #eee;">
    <div class="container h-100 py-5">
        <div class="row d-flex justify-content-center align-items-center h-50">
            <h3 class="fw-normal mb-0 text-black">Shopping Cart</h3>
            <div class="col-10">
                @if (@Model.Items.Any())
                {
                    @foreach (var item in Model.Items)
                    {
                        <div class="card rounded-3 mb-4">
                            <div class="card-body p-4">
                                <div class="row align-items-center" data-product-id="@item.ProductId">
                                    <div class="col-md-2 col-lg-2 col-xl-2">
                                        <img src="@item.ImageUrl" class="img-fluid rounded-3" alt="@item.Name">
                                    </div>
                                    <div class="col-md-3 col-lg-3 col-xl-3">
                                        <p class="lead fw-normal mb-2">@item.Name</p>
                                        <p><span class="text-muted">Size: </span>M <span class="text-muted">Color: </span>Grey</p>
                                    </div>
                                    <div class="col-md-2 col-lg-2 col-xl-2 d-flex justify-content-center align-items-center">
                                        <div class="quantity">
                                            <button class="btn btn-outline-primary decrease">-</button>
                                            <span class="cart-quantity">@item.Quantity</span>
                                            <button class="btn btn-outline-primary increase">+</button>
                                        </div>
                                    </div>
                                    <div class="col-md-2 col-lg-2 col-xl-2">
                                        <div class="price">
                                            <h5>$@item.Price</h5>
                                        </div>
                                    </div>
                                    <div class="col-md-2 col-lg-2 col-xl-2">
                                        <div class="total">
                                            <h5>$@(item.Price * item.Quantity)</h5>
                                        </div>
                                    </div>
                                    <div class="col-md-1 col-lg-1 col-xl-1 text-end">
                                        <a asp-action="RemoveFromCart" asp-route-productId="@item.ProductId">
                                            <button class="btn btn-outline-dark">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>


                    }
                }
                else
                {
                    <p class="lead fw-normal mb-2">Your cart still have nothing</p>
                }


            </div>
        </div>
        <div class="row d-flex justify-content-center align-items-center h-10">
            <div class="col-10">
                <div class="card mb-4">
                    <div class="card-body p-4 d-flex flex-row">
                        <div>
                            <span id="totalAmount" class="text-muted px-lg-5">Total: </span>
                        </div>
                    </div>
                </div>
                <div class="card mb-4">
                    <div class="card-body p-4 d-flex flex-row">
                        <input id="discountCode" type="text" class="form-control" placeholder="Enter discount code">
                        <button id="verifyCodeBtn" class="btn btn-primary">Apply</button>
                    </div>
                </div>

                <div id="discountDetails" style="display:none;" class="card mb-4">
                    <div class="card-body">
                        <p>Original Price: <span id="originalPrice"></span></p>
                        <p>Total Discount: <span id="totalDiscount"></span></p>
                        <p>Final Price: <span id="finalPrice"></span></p>
                    </div>
                </div>

                @* <div class="card mb-4">
                <div class="card-body p-4 d-flex flex-row">
                <span class="text-muted px-lg-5">Total: </span>
                </div>
                </div>  *@

                <div class="card">
                    @* onclick="clearCart()" type="button" class="btn btn-danger btn-block btn-lg" *@
                    <div class="card-body">
                        <button asp-controller="ShoppingCart" asp-action="ClearCart" onclick="clearCart()" type="button" class="btn btn-danger btn-block btn-lg">
                            Clear Cart
                        </button>
                        @* <div class="">
                        <form asp-controller="ShoppingCart" asp-action="Checkout" method="get">
                        <button type="submit" class="btn btn-warning btn-block btn-lg">Proceed to Pay</button>
                        </form>
                        </div> *@
                        <button type="button" class="btn btn-disable btn-block btn-lg" id="updateBtn" disabled>Update</button>
                        <form id="paymentForm" class="pt-2" action="@Url.Action("Payment", "ShoppingCart", new { area = "User" })" method="post">
                            <input type="hidden" name="totalAmount" id="hiddenFinalPrice">
                            <button type="submit" class="btn btn-warning btn-block btn-lg" id="PayBtn">Pay Now</button>
                        </form>

                    </div>

                </div>
            </div>
        </div>

</section>
<style>
    .btn-orange {
        background-color: orange;
        color: white;
    }

    .btn-disable {
        color: white;
        background-color: gray;
        pointer-events: none; /* This makes the element non-interactive */
    }
</style>

<script src="	https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
    function clearCart() {
        // Xóa tất cả các sản phẩm trong giỏ hàng
        var cartItems = document.querySelectorAll('.card');
        cartItems.forEach(function (item) {
            item.remove();
        });

        // Hiển thị thông báo rằng giỏ hàng đã được xóa
        alert("Your cart has been cleared.");
    }

</script>

@section scripts {
    <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Gọi hàm tính tổng tiền khi trang được tải
            calculateTotal();

            const updateButton = document.getElementById('updateBtn');
            // Lấy tất cả các nút tăng và giảm
            const increaseButtons = document.querySelectorAll('.increase');
            const decreaseButtons = document.querySelectorAll('.decrease');

            function enableUpdateButton() {
                updateButton.disabled = false;
                updateButton.classList.remove('btn-disable');
                updateButton.classList.add('btn-orange');
            }

            // Lặp qua mỗi nút tăng và giảm để gắn sự kiện
            increaseButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const row = button.closest('.card'); // Tìm thẻ cha gần nhất có class 'card'
                    const quantityElement = row.querySelector('.quantity span');
                    let quantity = parseInt(quantityElement.textContent);
                    quantity++;
                    quantityElement.textContent = quantity;
                    enableUpdateButton();
                    updateTotal(row); // Cập nhật tổng tiền sau khi thay đổi số lượng
                });
            });

            $.ajax({
                url: '@Url.Action("GetTotalItemsInCart", "ShoppingCart", new { area = "User" })', // Verify the correct URL
                type: 'GET',
                data: {},
                success: function (data) {
                    $('#cartTotal').text(data.toString());
                },
                error: function () {
                    $('#cartTotal').text(0);
                }
            });

            decreaseButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const row = button.closest('.card'); // Tìm thẻ cha gần nhất có class 'card'
                    const quantityElement = row.querySelector('.quantity span');
                    let quantity = parseInt(quantityElement.textContent);
                    if (quantity > 1) {
                        quantity--;
                        quantityElement.textContent = quantity;
                        enableUpdateButton();
                        updateTotal(row); // Cập nhật tổng tiền sau khi thay đổi số lượng
                    }
                });
            });

            // Hàm tính tổng tiền
            function calculateTotal() {
                const totalCells = document.querySelectorAll('.total h5');
                let totalAmount = 0;
                totalCells.forEach(cell => {
                    totalAmount += parseFloat(cell.textContent.replace('$', ''));
                });
                document.getElementById('totalAmount').textContent = 'Total Amount: $' + totalAmount.toFixed(2);
            }

            // Hàm cập nhật tổng tiền của sản phẩm
            function updateTotal(row) {
                const quantityElement = row.querySelector('.quantity span');
                const priceElement = row.querySelector('.price h5');
                const totalElement = row.querySelector('.total h5');
                const quantity = parseInt(quantityElement.textContent);
                const price = parseFloat(priceElement.textContent.replace('$', '')); // Loại bỏ ký tự '$'
                totalElement.textContent = '$' + (price * quantity).toFixed(2);

                calculateTotal(); // Tính toán lại tổng tiền
            }

            document.querySelectorAll('.cart-quantity').forEach(input => {
                input.addEventListener('change', enableUpdateButton);
            });

        });
        document.getElementById('updateBtn').addEventListener('click', function () {
            const updateButton = document.getElementById('updateBtn');
            const cartItems = document.querySelectorAll('.row[data-product-id]');
            const updatedCart = [];

            cartItems.forEach(item => {
                const productId = item.getAttribute('data-product-id');
                const quantity = parseInt(item.querySelector('.cart-quantity').textContent.trim(), 10);

                updatedCart.push({ productId, quantity });
            });

            fetch('@Url.Action("UpdateCart", "ShoppingCart", new { area = "User" })', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value // Correct token fetching
                },
                body: JSON.stringify({ items: updatedCart })
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok ' + response.statusText);
                    }
                    return response.json();
                })
                .then(data => {
                    toastr.success('Cart updated successfully!');
                    updateButton.disabled = true;
                    updateButton.classList.remove('btn-disable');
                    updateButton.classList.add('btn-orange');
                })
                .catch(error => {
                    console.error('Error updating cart:', error);
                    toastr.error('Error updating the cart.');
                });
        });
        document.getElementById('PayBtn').addEventListener('click', function () {
            var finalPrice = parseInt($('#finalPrice').text(), 10);
            if (finalPrice == 0) {
                $('#hiddenFinalPrice').val(parseInt($('#totalAmount').text(), 10));
            }
            else {
                $('#hiddenFinalPrice').val(finalPrice);
            }
            
        });
        document.getElementById('verifyCodeBtn').addEventListener('click', function () {
            const discountCode = String($('#discountCode').val());
            if (!discountCode) {
                toastr.warning('Please enter a discount code.');
                return;
            }
            $.ajax({
                url: '@Url.Action("VerifyDiscountCode", "Coupons", new { area = "Admin" })', // Verify the correct URL
                type: 'POST',
                data: { couponCode: discountCode },
                success: function (data) {
                    const originalPrice = parseFloat(document.getElementById('totalAmount').textContent.replace('Total Amount: $', ''));
                    if (originalPrice >= data.minimum) {
                        toastr.success('Discount code applied successfully!');
                        document.getElementById('discountDetails').style.display = 'block';
                        const discount = parseFloat(data.discount);
                        if (data.type == "Percentage") {
                            const finalPrice = originalPrice - (originalPrice * discount / 100);
                            document.getElementById('totalDiscount').textContent = discount.toFixed(2) + '%';
                            document.getElementById('finalPrice').textContent = finalPrice.toFixed(2);
                        }
                        else {
                            const finalPrice = originalPrice - discount;
                            document.getElementById('totalDiscount').textContent = discount.toFixed(2) + 'đ';
                            document.getElementById('finalPrice').textContent = finalPrice.toFixed(2);
                        }
                        document.getElementById('originalPrice').textContent = originalPrice.toFixed(2);
                        $.ajax({
                            url: '@Url.Action("SetDiscountSession", "Coupons", new { area = "Admin" })', // Verify the correct URL
                            type: 'POST',
                            data: { couponId: data.id },
                            success: function (data) {
                                console.log("Data received:", data);
                            },
                            error: function () {
                               
                            }
                        });
                    }
                },
                error: function () {
                    
                }
            });

          
        });


    </script>

}


